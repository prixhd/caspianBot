from aiogram import Bot, Dispatcher, types, executor
import aiogram.utils.markdown as md

from keyboards import start_command, form_for_team_command, order_work_command
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from dotenv import load_dotenv, find_dotenv
import os
from validation import emailVal, numberVal
from sendMessage import send_email
from database import db

load_dotenv(find_dotenv())
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class FormForTeam(StatesGroup):
    name = State()
    email = State()
    number = State()
    about = State()


class OrderWork(StatesGroup):
    name = State()
    email = State()
    name_your_company = State()
    your_web_before = State()
    services_on_your_web = State()
    reg_company = State()
    aud_company = State()
    advantages_company = State()
    competitor_your_company = State()
    requirement_design = State()
    struct_web = State()
    should_be_on_web = State()
    web_you_like = State()
    web_you_dont_like = State()


casData = db.Data('database/db.db')


@dp.message_handler(commands="start")
async def start(message: types.Message):
    keyboard = await start_command()
    if not casData.user_exists(message.from_user.id):
        casData.add_user(message.from_user.id)
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ Caspian Tech! '
                                                     '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –∑–¥–µ—Å—å –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n'
                                                     '–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ —Å–µ—Ç–∏. '
                                                     '–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. '
                                                     '–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –í–∞–º –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º –í–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n\n'
                                                     '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Üì', reply_markup=keyboard)
    else:
        await bot.send_message(message.from_user.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ Caspian Tech! '
                                                     '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –∑–¥–µ—Å—å –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n'
                                                     '–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ —Å–µ—Ç–∏. '
                                                     '–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. '
                                                     '–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –í–∞–º –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º –í–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n\n'
                                                     '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ ‚Üì', reply_markup=keyboard)


# ---------------------------------------------------------------------------------------------------------------
# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´, –ü–û –ó–ê–Ø–í–ö–ï –í –ö–û–ú–ê–ù–î–£ CASPIAN TECH
# ---------------------------------------------------------------------------------------------------------------
@dp.message_handler(Text(equals='–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã CaspianTech'))
async def form_for_team(message: types.Message):
    await FormForTeam.name.set()
    await bot.send_message(message.from_user.id, '–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—ÉüôÇ\n\n'
                                                 '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ò–ú–Ø
@dp.message_handler(state=FormForTeam.name)
async def form_for_team_process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        if casData.get_signup(message.from_user.id) == "setnickname":
            casData.set_nickname(message.from_user.id, message.text)
            casData.set_signup(message.from_user.id, "done")

    await FormForTeam.next()
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤–∞—à—É –ø–æ—á—Ç—É:")


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ü–û–ß–¢–£, –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –í–í–û–î–ê
@dp.message_handler(lambda message: not emailVal(message.text), state=FormForTeam.email)
async def form_for_team_process_email_invalid(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ—á—Ç—É')


@dp.message_handler(lambda message: emailVal(message.text), state=FormForTeam.email)
async def form_for_team_process_email(message: types.Message, state: FSMContext):
    await FormForTeam.next()
    await state.update_data(
        email=message.text
    )

    await message.answer('–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏:')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ù–û–ú–ï–† –ò –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –í–í–û–î–ê
@dp.message_handler(lambda message: not numberVal(message.text), state=FormForTeam.number)
async def form_form_team_process_number_invalid(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')


@dp.message_handler(lambda message: numberVal(message.text), state=FormForTeam.number)
async def form_form_team_process_number(message: types.Message, state: FSMContext):
    await FormForTeam.next()
    await state.update_data(
        number=int(message.text)
    )

    await message.reply(
        '–ò –Ω–∞–∫–æ–Ω–µ—Ü —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ, –∫–∞–∫ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–µ!(–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è,–Ω–∞–≤—ã–∫–∏, –≥–¥–µ —Ç—ã —É—á–∏–ª—Å—è –∏ —Ç.–¥.)')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ë–õ–û–ö–ï "–û –°–ï–ë–ï" –ê –¢–ê–ö–ñ–ï –í–´–í–û–î–ò–¢–°–Ø –í–°–Ø –§–û–†–ú–ê –ò –û–¢–ü–†–ê–ö–õ–Ø–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï –ù–ê –ü–û–ß–¢–£
@dp.message_handler(state=FormForTeam.about)
async def form_form_team_process_about(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about'] = message.text

        messages = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É: \n\n" \
                   f"–ò–º—è: {data['name']}\n" \
                   f"–ü–æ—á—Ç–∞: {data['email']}\n" \
                   f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}\n" \
                   f"–û —Å–µ–±–µ: {data['about']}\n"

        send_email(message=messages)
        await bot.send_message(message.from_user.id, f'{messages}\n\n'
                                                     f'–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ!\n'
                                                     '–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏üòâ')

        await state.finish()


# ----------------------------------------------------------------------------------------------------------------
# –ö–û–ù–ï–¶ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´ –í CASPIANTECH
# ----------------------------------------------------------------------------------------------------------------

# -----------------------------------------------------------------------------------------------------------------
# –ù–ê–ß–ê–õ–û –ó–ê–ö–ê–ó–ê –†–ê–ë–û–¢–´ –í CASPIANTECH
# -----------------------------------------------------------------------------------------------------------------

@dp.message_handler(Text(equals="–ó–∞–∫–∞–∑–∞—Ç—å —Ä–∞–±–æ—Ç—É"))
async def order_work(message: types.Message):
    keyboard = await order_work_command()
    await bot.send_message(message.from_user.id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ—à–∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é!\n"
                                                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å ‚Üì", reply_markup=keyboard)


@dp.callback_query_handler(lambda a: a.data == "site")
async def order_work_site(message: types.Message):
    await OrderWork.name.set()
    await bot.send_message(message.from_user.id, "–¢–∞–∫, —Ö–æ—Ä–æ—à–æ –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –±—Ä–∏—Ñ, "
                                                 "–±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä–æ–º—É –º—ã –ø–æ–π–º–µ–º, –∫–∞–∫–æ–π —Å–∞–π—Ç –≤–∞–º –Ω—É–∂–µ–Ω. "
                                                 "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:")


@dp.message_handler(state=OrderWork.name)
async def order_work_site_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        if casData.get_signup(message.from_user.id) == "setnickname":
            casData.set_nickname(message.from_user.id, message.text)
            casData.set_signup(message.from_user.id, "done")

    await OrderWork.next()
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤–∞—à—É –ø–æ—á—Ç—É, –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏:")


@dp.message_handler(lambda message: not emailVal(message.text), state=OrderWork.email)
async def order_work_site_process_email_invalid(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ—á—Ç—É')


@dp.message_handler(lambda message: emailVal(message.text), state=OrderWork.email)
async def order_work_site_process_email_success(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        email=message.text
    )

    await message.answer('–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?')


@dp.message_handler(state=OrderWork.name_your_company)
async def order_work_site_name_company(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        name_your_company=message.text
    )

    await message.answer('–ë—ã–ª –ª–∏ —É –≤–∞—Å –¥–æ —ç—Ç–æ–≥–æ —Å–∞–π—Ç? (—É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É)')


@dp.message_handler(state=OrderWork.your_web_before)
async def order_work_site_web_before(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        your_web_before=message.text
    )

    await message.answer('–ö–∞–∫–∏–µ –≤–∏–¥—ã —É—Å–ª—É–≥ –æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?')


@dp.message_handler(state=OrderWork.services_on_your_web)
async def order_work_site_services_your_web(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        services_on_your_web=message.text
    )

    await message.answer('–ö–∞–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è?')


@dp.message_handler(state=OrderWork.reg_company)
async def order_work_site_reg_company(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        reg_company=message.text
    )

    await message.answer('–ö–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —É  –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏?')


@dp.message_handler(state=OrderWork.aud_company)
async def order_work_site_aud_company(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        aud_company=message.text
    )

    await message.answer('–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ ?')


@dp.message_handler(state=OrderWork.advantages_company)
async def order_work_site_advantages_company(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        advantages_company=message.text
    )

    await message.answer('–ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤')


@dp.message_handler(state=OrderWork.competitor_your_company)
async def order_work_site_competitor_company(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        competitor_your_company=message.text
    )

    await message.answer('–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É —Å–∞–π—Ç–∞?')


@dp.message_handler(state=OrderWork.requirement_design)
async def order_work_site_requirement_design(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        requirement_design=message.text
    )

    await message.answer('–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∞–π—Ç–∞?')


@dp.message_handler(state=OrderWork.struct_web)
async def order_work_site_struct_web(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        struct_web=message.text
    )

    await message.answer('–ß—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å  –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ?')


@dp.message_handler(state=OrderWork.should_be_on_web)
async def order_work_site_should_be_on_web(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        should_be_on_web=message.text
    )

    await message.answer('–ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è –≤–∞–º –ø–æ –≤–∏–∑—É–∞–ª—É –∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É?')


@dp.message_handler(state=OrderWork.web_you_like)
async def order_work_site_web_you_like(message: types.Message, state: FSMContext):
    await OrderWork.next()
    await state.update_data(
        web_you_like=message.text
    )

    await message.answer('–ï—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ  –ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è –≤–∞–º –ø–æ –≤–∏–∑—É–∞–ª—É –∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É?')


@dp.message_handler(state=OrderWork.web_you_dont_like)
async def order_work_site_web_you_dont_like(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['web_you_dont_like'] = message.text

        messages = "–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ —Ä–∞–±–æ—Ç—ã: \n\n" \
                   f"–ò–º—è: {data['name']}\n" \
                   f"–ü–æ—á—Ç–∞: {data['email']}\n" \
                   f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: {data['name_your_company']}\n" \
                   f"–ë—ã–ª –ª–∏ —É –≤–∞—Å —Å–∞–π—Ç —Ä–∞–Ω—å—à–µ: {data['your_web_before']}\n" \
                   f"–£—Å–ª—É–≥–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º—ã–µ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π: {data['services_on_your_web']}\n" \
                   f"–ö–∞–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è: {data['reg_company']}\n" \
                   f"–ö–∞–∫–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —É  –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏: {data['aud_company']}\n" \
                   f"–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞: {data['advantages_company']}\n" \
                   f"–ü—Ä–∏–≤–µ–¥–∏—Ç–µ —Å–∞–π—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: {data['competitor_your_company']}\n" \
                   f"–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É —Å–∞–π—Ç–∞: {data['requirement_design']}\n" \
                   f"–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Å–∞–π—Ç–∞: {data['struct_web']}\n" \
                   f"–ß—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å  –Ω–∞ –≤–∞—à–µ–º —Å–∞–π—Ç–µ: {data['should_be_on_web']}\n" \
                   f"–ü—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –Ω—Ä–∞–≤—è—Ç—Å—è –≤–∞–º –ø–æ –≤–∏–∑—É–∞–ª—É –∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É: {data['web_you_like']}\n" \
                   f"–ü—Ä–∏–º–µ—Ä—ã —Å–∞–π—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ  –ù–ï –Ω—Ä–∞–≤—è—Ç—Å—è –≤–∞–º –ø–æ –≤–∏–∑—É–∞–ª—É –∏ –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É: {data['web_you_dont_like']}\n"

        send_email(message=messages)
        await bot.send_message(message.from_user.id, f'{messages}\n\n'
                                                     f'–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ—Ç –±—Ä–∏—Ñ!\n'
                                                     '–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏üòâ')

        await state.finish()

# ----------------------------------------------------------------------------------------------------------------
# –ö–û–ù–ï–¶ –ó–ê–ö–ê–ó–´ –†–ê–ë–û–¢–´ –í CASPIANTECH
# ----------------------------------------------------------------------------------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
