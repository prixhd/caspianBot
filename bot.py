from aiogram import Bot, Dispatcher, types, executor
import aiogram.utils.markdown as md

from keyboards import start_command, form_for_team_command
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from validation import emailVal
from sendMessage import send_email

bot = Bot(token='6085427546:AAEfBDoQdY0D4LFTFBWPj7uKTKIx8gpFq4c')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class FormForTeam(StatesGroup):
    name = State()
    email = State()
    number = State()
    about = State()


@dp.message_handler(commands="start")
async def start(message: types.Message):
    keyboard = await start_command()
    await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –∫–æ–º–ø–∞–Ω–∏–∏ Caspian Tech! '
                         '–ú—ã –æ—á–µ–Ω—å —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –í–∞—Å –∑–¥–µ—Å—å –∏ –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –Ω–∞—à –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n'
                         '–ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –í–∞–º –ø—Ä–∏–≤–ª–µ—á—å –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –≤ —Å–µ—Ç–∏. '
                         '–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö, –∑–∞–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. '
                         '–ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –í–∞–º –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∞–π—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º –í–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n\n'
                         '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤—ã–º –Ω—É–∂–Ω–æ ‚Üì', reply_markup=keyboard)


# ---------------------------------------------------------------------------------------------------------------
# –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´, –ü–û –ó–ê–Ø–í–ö–ï –í –ö–û–ú–ê–ù–î–£ CASPIAN TECH
# ---------------------------------------------------------------------------------------------------------------
@dp.message_handler(Text(equals='–°—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –∫–æ–º–∞–Ω–¥—ã CaspianTech'))
async def form_for_team(message: types.Message):
    await FormForTeam.name.set()
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é —Ñ–æ—Ä–º—ÉüôÇ\n\n'
                         '–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ò–ú–Ø
@dp.message_handler(state=FormForTeam.name)
async def form_for_team_process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await FormForTeam.next()
    await message.answer("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤–∞—à—É –ø–æ—á—Ç—É:")


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ü–û–ß–¢–£, –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –í–í–û–î–ê
@dp.message_handler(lambda message: not emailVal(message.text), state=FormForTeam.email)
async def form_for_team_process_email_invalid(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é –ø–æ—á—Ç—É')


@dp.message_handler(lambda message: emailVal(message.text), state=FormForTeam.email)
async def form_for_team_process_email(message: types.Message, state: FSMContext):
    await FormForTeam.next()
    await state.update_data(
        email=message.text
    )

    await message.answer('–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏:')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ù–û–ú–ï–† –ò –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ê–í–ò–õ–¨–ù–û–°–¢–¨ –í–í–û–î–ê
@dp.message_handler(lambda message: not message.text.isdigit(), state=FormForTeam.number)
async def form_form_team_process_number_invalid(message: types.Message):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!')


@dp.message_handler(lambda message: message.text.isdigit(), state=FormForTeam.number)
async def form_form_team_process_number(message: types.Message, state: FSMContext):
    await FormForTeam.next()
    await state.update_data(number=int(message.text))

    await message.reply(
        '–ò –Ω–∞–∫–æ–Ω–µ—Ü —Ä–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ, –∫–∞–∫ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–µ!(–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è,–Ω–∞–≤—ã–∫–∏, –≥–¥–µ —Ç—ã —É—á–∏–ª—Å—è –∏ —Ç.–¥.)')


# STATE –ü–û–°–¢–ê–í–õ–ï–ù –ù–ê –ë–õ–û–ö–ï "–û –°–ï–ë–ï" –ê –¢–ê–ö–ñ–ï –í–´–í–û–î–ò–¢–°–Ø –í–°–Ø –§–û–†–ú–ê –ò –û–¢–ü–†–ê–ö–õ–Ø–ï–¢–°–Ø –°–û–û–ë–©–ï–ù–ò–ï –ù–ê –ü–û–ß–¢–£
@dp.message_handler(state=FormForTeam.about)
async def form_form_team_process_about(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['about'] = message.text

        messages = "–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É: \n\n" \
                   f"–ò–º—è: {data['name']}\n" \
                   f"–ü–æ—á—Ç–∞: {data['email']}\n" \
                   f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {data['number']}\n" \
                   f"–û —Å–µ–±–µ: {data['about']}\n"

        # await bot.send_message(
        #     message.chat.id,
        #     md.text(
        #         md.text('–í—Å–µ –≤–µ—Ä–Ω–æ?\n\n–í–∞—à–µ –∏–º—è: ', md.bold(data['name'])),
        #         md.text('E-mail: ', md.bold(data['email'])),
        #         md.text('–ù–æ–º–µ—Ä: ', md.bold(data['number']), '\n'),
        #         md.text('–û –≤–∞—Å: ', md.bold(data['about'])),
        #         sep='\n',
        #     ),
        #     parse_mode=ParseMode.MARKDOWN,
        # )

        send_email(message=messages)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–ª–∏ —Å–≤–æ–µ —Ä–µ–∑—é–º–µ!\n'
                             '–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏üòâ')

        await state.finish()


# ----------------------------------------------------------------------------------------------------------------
# –ö–û–ù–ï–¶ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –§–û–†–ú–´ –í CASPIANTECH
# ----------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
